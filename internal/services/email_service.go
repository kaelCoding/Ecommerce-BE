package services

import (
    "fmt"
    "os"
    "strconv"

    "github.com/kaelCoding/toyBE/internal/models"
    "gopkg.in/gomail.v2"
)

const shippingFee = 50000

func formatVND(amount float64) string {
    s := strconv.Itoa(int(amount))
    n := len(s)
    if n <= 3 {
        return s + " VNƒê"
    }

    sepCount := (n - 1) / 3
    result := make([]byte, n+sepCount)

    j := len(result) - 1
    for i := n - 1; i >= 0; i-- {
        result[j] = s[i]
        j--
        if (n-1-i)%3 == 2 && i > 0 {
            result[j] = '.'
            j--
        }
    }
    return string(result) + " VNƒê"
}

func SendOrderConfirmationEmail(order models.Order) error {
    if len(order.OrderItems) == 0 {
        return fmt.Errorf("order %d has no items", order.ID)
    }
    item := order.OrderItems[0]

    currentShippingFee := float64(shippingFee)
    if order.User.VIPLevel >= 2 {
        currentShippingFee = 0
    }
    finalTotal := order.TotalAmount + currentShippingFee

    smtpHost := os.Getenv("SMTP_HOST")
    smtpPort, _ := strconv.Atoi(os.Getenv("SMTP_PORT"))
    smtpUser := os.Getenv("SMTP_USER")
    smtpPass := os.Getenv("SMTP_PASS")
    recipientEmail := os.Getenv("RECIPIENT_EMAIL")

    body := fmt.Sprintf(`
        <h1>üéâ B·∫°n c√≥ ƒë∆°n h√†ng m·ªõi!</h1>
        <p>Th√¥ng tin chi ti·∫øt ƒë∆°n h√†ng:</p>
        <table border="1" cellpadding="10" cellspacing="0" style="border-collapse: collapse;">
            <tr><td style="background-color: #f2f2f2;"><strong>S·∫£n ph·∫©m</strong></td><td>%s</td></tr>
            <tr><td style="background-color: #f2f2f2;"><strong>S·ªë l∆∞·ª£ng</strong></td><td>%d</td></tr>
            <tr><td style="background-color: #f2f2f2;"><strong>Th√†nh ti·ªÅn</strong></td><td>%s</td></tr>
            <tr><td style="background-color: #f2f2f2;"><strong>Gi·∫£m gi√° VIP</strong></td><td>%s</td></tr>
            <tr><td style="background-color: #f2f2f2;"><strong>Ph√≠ c·ªçc ship</strong></td><td>%s</td></tr>
            <tr><td style="background-color: #f2f2f2;"><strong>T·ªïng thanh to√°n</strong></td><td><strong>%s</strong></td></tr>
            <tr><td colspan="2" style="background-color: #f2f2f2; text-align: center;"><strong>Th√¥ng tin kh√°ch h√†ng</strong></td></tr>
            <tr><td><strong>H·ªç v√† t√™n</strong></td><td>%s</td></tr>
            <tr><td><strong>S·ªë ƒëi·ªán tho·∫°i</strong></td><td>%s</td></tr>
            <tr><td><strong>Email</strong></td><td>%s</td></tr> <tr><td><strong>ƒê·ªãa ch·ªâ</strong></td><td>%s</td></tr>
            <tr><td><strong>Ph∆∞∆°ng th·ª©c thanh to√°n</strong></td><td>%s</td></tr>
        </table>
        <p>Vui l√≤ng li√™n h·ªá kh√°ch h√†ng ƒë·ªÉ x√°c nh·∫≠n v√† x·ª≠ l√Ω ƒë∆°n h√†ng.</p>
    `, item.Product.Name, item.Quantity, formatVND(order.OriginalAmount), formatVND(order.DiscountApplied), formatVND(currentShippingFee), formatVND(finalTotal), order.CustomerName, order.CustomerPhone, order.CustomerEmail, order.CustomerAddress, order.PaymentMethod)

    m := gomail.NewMessage()
    m.SetHeader("From", smtpUser)
    m.SetHeader("To", recipientEmail)
    m.SetHeader("Subject", fmt.Sprintf("ƒê∆°n h√†ng m·ªõi cho s·∫£n ph·∫©m: %s", item.Product.Name))
    m.SetBody("text/html", body)

    d := gomail.NewDialer(smtpHost, smtpPort, smtpUser, smtpPass)
    return d.DialAndSend(m)
}

func SendInvoiceToCustomer(order models.Order, customerEmail string) error {
    if len(order.OrderItems) == 0 {
        return fmt.Errorf("order %d has no items", order.ID)
    }
    item := order.OrderItems[0]

    currentShippingFee := float64(shippingFee)
    if order.User.VIPLevel >= 2 {
        currentShippingFee = 0
    }
    finalTotal := order.TotalAmount + currentShippingFee

    smtpHost := os.Getenv("SMTP_HOST")
    smtpPort, _ := strconv.Atoi(os.Getenv("SMTP_PORT"))
    smtpUser := os.Getenv("SMTP_USER")
    smtpPass := os.Getenv("SMTP_PASS")

    qrImageUrl := "https://res.cloudinary.com/dkrnoq3rb/image/upload/v1755360307/products/product_1755360303736929000.png"

    body := fmt.Sprintf(`
        <h1>C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng t·∫°i TUNI TOKU!</h1>
        <p>Ch√†o <b>%s</b>,</p>
        <p>ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ti·∫øp nh·∫≠n th√†nh c√¥ng. Ch√∫ng t√¥i s·∫Ω s·ªõm li√™n h·ªá v·ªõi b·∫°n ƒë·ªÉ x√°c nh·∫≠n v√† ti·∫øn h√†nh giao h√†ng.</p>
        
        <h2>Chi ti·∫øt ƒë∆°n h√†ng:</h2>
        <table border="1" cellpadding="10" cellspacing="0" style="border-collapse: collapse;">
            <tr><td style="background-color: #f2f2f2;"><strong>S·∫£n ph·∫©m</strong></td><td>%s</td></tr>
            <tr><td style="background-color: #f2f2f2;"><strong>S·ªë l∆∞·ª£ng</strong></td><td>%d</td></tr>
            <tr><td style="background-color: #f2f2f2;"><strong>Th√†nh ti·ªÅn</strong></td><td>%s</td></tr>
            <tr><td style="background-color: #f2f2f2;"><strong>Gi·∫£m gi√° VIP</strong></td><td>%s</td></tr>
            <tr><td style="background-color: #f2f2f2;"><strong>Ph√≠ c·ªçc ship</strong></td><td>%s</td></tr>
            <tr><td style="background-color: #f2f2f2;"><strong>T·ªïng thanh to√°n</strong></td><td><strong>%s</strong></td></tr>
            <tr><td colspan="2" style="background-color: #f2f2f2; text-align: center;"><strong>Th√¥ng tin nh·∫≠n h√†ng</strong></td></tr>
            <tr><td><strong>H·ªç v√† t√™n</strong></td><td>%s</td></tr>
            <tr><td><strong>S·ªë ƒëi·ªán tho·∫°i</strong></td><td>%s</td></tr>
            <tr><td><strong>ƒê·ªãa ch·ªâ</strong></td><td>%s</td></tr>
            <tr><td><strong>Ph∆∞∆°ng th·ª©c thanh to√°n</strong></td><td>%s</td></tr>
        </table>

        <h3>M√£ QR code chuy·ªÉn kho·∫£n:</h3>
        <p>Qu√©t m√£ QR b√™n d∆∞·ªõi ƒë·ªÉ thanh to√°n(Ti·ªÅn c·ªçc ship/T·ªïng ti·ªÅn ƒë∆°n h√†ng).</p>
        <img src="%s" style="width: 250px; height: 250px;" alt="QR Code">

        <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† mua s·∫Øm t·∫°i TUNI TOKU!</p>
    `, order.CustomerName, item.Product.Name, item.Quantity, formatVND(order.OriginalAmount), formatVND(order.DiscountApplied), formatVND(currentShippingFee), formatVND(finalTotal), order.CustomerName, order.CustomerPhone, order.CustomerAddress, order.PaymentMethod, qrImageUrl)

    m := gomail.NewMessage()
    m.SetHeader("From", smtpUser)
    m.SetHeader("To", customerEmail)
    m.SetHeader("Subject", fmt.Sprintf("X√°c nh·∫≠n ƒë∆°n h√†ng #%d t·ª´ TUNI TOKU", order.ID))
    m.SetBody("text/html", body)

    d := gomail.NewDialer(smtpHost, smtpPort, smtpUser, smtpPass)
    return d.DialAndSend(m)
}

func SendFeedbackEmail(feedback models.Feedback) error {
    smtpHost := os.Getenv("SMTP_HOST")
    smtpPort, _ := strconv.Atoi(os.Getenv("SMTP_PORT"))
    smtpUser := os.Getenv("SMTP_USER")
    smtpPass := os.Getenv("SMTP_PASS")
    recipientEmail := os.Getenv("RECIPIENT_EMAIL")

    body := fmt.Sprintf(`
        <h1>üí° B·∫°n c√≥ m·ªôt g√≥p √Ω m·ªõi t·ª´ ng∆∞·ªùi d√πng!</h1>
        <p>Th√¥ng tin chi ti·∫øt g√≥p √Ω:</p>
        <table border="1" cellpadding="10" cellspacing="0" style="border-collapse: collapse;">
            <tr><td style="background-color: #f2f2f2;"><strong>T√™n ng∆∞·ªùi g·ª≠i</strong></td><td>%s</td></tr>
            <tr><td style="background-color: #f2f2f2;"><strong>Email</strong></td><td>%s</td></tr>
            <tr><td style="background-color: #f2f2f2;"><strong>N·ªôi dung g√≥p √Ω</strong></td><td>%s</td></tr>
        </table>
        <p>Vui l√≤ng xem x√©t g√≥p √Ω n√†y ƒë·ªÉ c·∫£i thi·ªán d·ªãch v·ª•.</p>
    `, feedback.Name, feedback.Email, feedback.Content)

    m := gomail.NewMessage()
    m.SetHeader("From", smtpUser)
    m.SetHeader("To", recipientEmail)
    m.SetHeader("Subject", fmt.Sprintf("G√≥p √Ω m·ªõi t·ª´: %s", feedback.Name))
    m.SetBody("text/html", body)

    d := gomail.NewDialer(smtpHost, smtpPort, smtpUser, smtpPass)

    if err := d.DialAndSend(m); err != nil {
        return err
    }

    return nil
}
